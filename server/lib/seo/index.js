/**
* Serve up "plain html" versions of angular app pages for search crawlers AND facebook crawlers.
*
* This is needed since Angular apps are rendered entirely by Javascript, and crawlers don't
* execture jsavascipt, so they see blank pages. 
*
* What we do to get around this is: 
* - watch for signs of well behaved crawlers, which is having '?_escaped_fragment_=' in req.params
* - sping up a "phantom" browser on the server 
* - visit the page requested, which is indicated by _escaped_fragment_
* - grab the html from the page
* - remove the ng-app part, preventing the app from starting up again! (thanks see below)
* - send the html back the browser
*
* This will let a crawler access content normally generated by javascript. 
* Especially OG:Meta data!!!
*
* @see https://github.com/stephanebisson/ngseo/blob/master/src/ngseo.js
*      the above middleware would work great if not for the bug in phantom 1.9.2 which
*      causes errors due to unsupported 
*
* @see https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#wiki-webpage-evaluate
* 
* @note This script should be non-blocking... meaning it will not tie up the main server while the 
*       html page is generated. 
*
*
*/

var express   = require('express');
var app       = module.exports = express();
var renderer  = require('./renderer');

// use this function as middlware
app.use(function(req, res, next) {
  
  // if we have no escaped fragement, move onto the next process
  if (!req.query || !req.query._escaped_fragment_) {
    return next();
  }

  // we do have a fragment, so lets assemble a URL that we can access within our app
  // basically we are reverse engineering the _escaped_fragment_
  // to figure out which url the crawler hit in the first place.
  var url = (req.secure ? 'https' : 'http') + '://';
  url += 'req.host' + ':' + app.get('port') + req.path;
  url += '#!/' + req.query._escaped_fragment_;

  // start our page renderer 
  renderer.render(url, function(html) {
    //console.log('Callback has been called');
    console.log(html);
    res.send('<html class="js no-flexbox flexboxlegacy canvas canvastext no-webgl touch no-geolocation postmessage websqldatabase no-indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms no-csstransforms3d csstransitions fontface generatedcontent no-video no-audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths ng-scope" ng-app="app"><!--<![endif]--><head>    <meta charset="utf-8">    <title ng-bind="title" class="ng-binding">The Beast Project in the Mooniverse | Rootstrikers</title>    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <meta name="description" content="Wolf organic four loko fixie, sed aute sint selvage jean shorts Williamsburg est. Delectus Austin photo booth pug, Godard selfies Bushwick gentrify dreamcatcher try-hard single-origin coffee pour-over nihil street art. Enim Odd Future labore, polaroid stumptown skateboard keffiyeh shabby chic meh id messenger bag. Organic Shoreditch Tumblr Vice bicycle rights. Culpa 90\'s freegan anim in labore, put a bird on it Truffaut. Carles pickled master cleanse hashtag cred, Williamsburg 90\'s post-ironic. Est McSweeney\'s lomo pop-up.&lt;/p&gt;">    <meta name="author" content="Faculty Creative / Well Fed">    <meta name="fragment" content="!">    <!-- Fonts -->    <link href="http://fonts.googleapis.com/css?family=Open+Sans:400,300,800,300italic" rel="stylesheet" type="text/css">    <link href="http://fonts.googleapis.com/css?family=Oswald:300,400,700" rel="stylesheet" type="text/css">  ');
  });
});
